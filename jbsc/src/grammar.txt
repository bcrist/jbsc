spec := spec-decl spec | ;
spec-decl := spec-name | spec-include | namespace | scoped-decl ;
spec-name := 'spec' text<specname> ';' ;
spec-include := 'include' ( spec-include-list | spec-include-name ) ;
spec-include-list := '{' spec-include-names '}' [';'] ;
spec-include-names := spec-include-name spec-include-names | ;
spec-include-name := text ';' ;
namespace := 'namespace' id<name> ( ';' | '{' namespace-decls '}' [';'] );
namespace-decls := namespace-decl namespace-decls | ;
namespace-decl := namespace | scoped-decl ;
scoped-decl := code | col-type | class-type | table | flag | ';' ; // TODO fieldset
code := [code-qualifier] unqualified-code ;
code-qualifier := 'inline' | 'header' | 'sqlid' | 'source' ;
unqualified-code := 'code' text<code> ';' ;
col-type := 'coltype' text '{' col-type-decls '}' [';'] ;
col-type-decls := col-type-decl col-type-decls | ;
col-type-decl := affinity | constraints | flag | field-type-decl ;
affinity := 'affinity' text ';' ;
constraints := 'constraints' text ';' ;
class-type := 'type' text '{' class-type-decls '}' [';'] ;
class-type-decls := class-type-decl class-type-decls | ;
class-type-decl := class-name | class-type-fields | flag | field-type-decl ;
class-name := 'class' text<classname> ';' ;
class-type-fields := 'fields' ( class-type-fields-list | class-type-field-decl ) ;
class-type-fields-list := '{' class-type-field-decls '}' [';'] ;
class-type-field-decls := class-type-field-decl class-type-field-decls | ;
class-type-field-decl := ['transient' | 'meta'] class-type-simple-field-decl ;
class-type-simple-field-decl := id<type> [id<name>] ';' ;
field-type-decl := required-include | parse | assign | ';' ;
field-type-function-code := function-name text ';' ;
table := 'table' id<name> '{' table-decls '}' [';'] ;
table-decls := table-decl table-decls | ;
table-decl := table-fields | index | fieldset | query | table | flag | ';' ;
table-fields := 'fields' ( table-fields-list | table-field-decl ) ;
table-fields-list := '{' table-field-decls '}' [';'] ;
table-field-decls := table-field-decl table-field-decls | ;
table-field-decl := ['meta'] table-simple-field-decl ;
table-simple-field-decl := id<type> [id<name>] ';' ;
entity-flag := 'flag' ( entity-flag-list | entity-flag-decl ) ;
entity-flag-list := '{' entity-flag-decls '}' [';'] ;
entity-flag-decls := entity-flag-decl entity-flag-decls | ;
entity-flag-decl := id<flagtype> ';' ;
required-include := ['implementation'] 'include' ( required-include-list | required-include-name ) ;
required-include-list := '{' required-include-names '}' [';'] ;
required-include-names := required-include-name required-include-names | ;
required-include-name := ( text.astring | text ) ';' ;
