
spec "be/bs/types";

namespace glm;
namespace std;

namespace be {
namespace bs {

flag no-skip-parse-assign;

coltype small_integer {
	affinity "INTEGER";
	constraints "NOT NULL";
	include <limits>;
	assign "stmt->bind(parameter, static_cast<I32>(value));";
	parse <[@\t[
		I32 temp = stmt->getInt(column);
		value = static_cast<T>(temp);
		if (temp < ::std::numeric_limits<T>::min() ||
		    temp > ::std::numeric_limits<T>::max())
		{
		   return false;
		}
	]]>;
}

coltype nullable_small_integer {
	affinity "INTEGER";
	include <limits>;
	assign "stmt->bind(parameter, static_cast<I32>(value));";
	parse <[@\t[
		I32 temp = stmt->getInt(column);
		value = static_cast<T>(temp);
		if (temp < ::std::numeric_limits<T>::min() ||
		    temp > ::std::numeric_limits<T>::max())
		{
		   return false;
		}
	]]>;
}

coltype integer {
	affinity "INTEGER";
	constraints "NOT NULL";
	include <limits>;
	assign "stmt->bind(parameter, static_cast<I64>(value));";
	parse <[@\t[
		I64 temp = stmt->getInt64(column);
		value = static_cast<T>(temp);
		if (temp < ::std::numeric_limits<T>::min() ||
		    temp > ::std::numeric_limits<T>::max())
		{
		   return false;
		}
	]]>;
}

coltype nullable_integer {
	affinity "INTEGER";
	include <limits>;
	assign "stmt->bind(parameter, static_cast<I64>(value));";
	parse <[@\t[
		I64 temp = stmt->getInt64(column);
		value = static_cast<T>(temp);
		if (temp < ::std::numeric_limits<T>::min() ||
		    temp > ::std::numeric_limits<T>::max())
		{
		   return false;
		}
	]]>;
}

coltype big_integer {
	affinity "INTEGER";
	constraints "NOT NULL";
	assign "stmt->bind(parameter, static_cast<I64>(value));";
	parse "value = static_cast<T>(stmt->getInt64(column));";
}

coltype unsigned_big_integer {
	affinity "INTEGER";
	constraints "NOT NULL";
	assign "stmt->bind(parameter, static_cast<U64>(value));";
	parse "value = static_cast<T>(stmt->getUInt64(column));";
}

coltype nullable_big_integer {
	affinity "INTEGER";
	assign "stmt->bind(parameter, static_cast<I64>(value));";
	parse "value = static_cast<T>(stmt->getInt64(column));";
}

coltype nullable_unsigned_big_integer {
	affinity "INTEGER";
	assign "stmt->bind(parameter, static_cast<U64>(value));";
	parse "value = static_cast<T>(stmt->getUInt64(column));";
}

coltype real {
	affinity "REAL";
	constraints "NOT NULL";
	include <limits>;
	include <cmath>;
	assign "stmt->bind(parameter, static_cast<F64>(value));";
	parse <[@\t[
		F64 temp = stmt->getDouble(column);
		value = static_cast<T>(temp);
		if (temp < ::std::numeric_limits<T>::lowest() ||
		    temp > ::std::numeric_limits<T>::max() ||
		    (::abs)(temp) < ::std::numeric_limits<T>::min())
		{
		   return false;
		}
	]]>;
}

coltype nullable_real {
	affinity "REAL";
	include <limits>;
	include <cmath>;
	assign "stmt->bind(parameter, static_cast<F64>(value));";
	parse <[@\t[
		F64 temp = stmt->getDouble(column);
		value = static_cast<T>(temp);
		if (temp < ::std::numeric_limits<T>::lowest() ||
		    temp > ::std::numeric_limits<T>::max() ||
		    (::abs)(temp) < ::std::numeric_limits<T>::min())
		{
		   return false;
		}
	]]>;
}

coltype numeric {
	affinity "NUMERIC";
	constraints "NOT NULL";
	include <limits>;
	include <cmath>;
	assign "stmt->bind(parameter, static_cast<F64>(value));";
	parse <[@\t[
		F64 temp = stmt->getDouble(column);
		value = static_cast<T>(temp);
		if (temp < ::std::numeric_limits<T>::lowest() ||
		    temp > ::std::numeric_limits<T>::max() ||
		    (::abs)(temp) < ::std::numeric_limits<T>::min())
		{
		   return false;
		}
	]]>;
}

coltype nullable_numeric {
	affinity "NUMERIC";
	include <limits>;
	include <cmath>;
	assign "stmt->bind(parameter, static_cast<F64>(value));";
	parse <[@\t[
		F64 temp = stmt->getDouble(column);
		value = static_cast<T>(temp);
		if (temp < ::std::numeric_limits<T>::lowest() ||
		    temp > ::std::numeric_limits<T>::max() ||
		    (::abs)(temp) < ::std::numeric_limits<T>::min())
		{
		   return false;
		}
	]]>;
}

coltype text {
	affinity "TEXT";
	constraints "NOT NULL";
	assign "stmt->bind(parameter, value);";
	parse "value = static_cast<T>(stmt->getTextString(column));";
}

coltype nullable_text {
	affinity "TEXT";
	assign "stmt->bind(parameter, value);";
	parse "value = static_cast<T>(stmt->getTextString(column));";
}

coltype blob {
	affinity "BLOB";
	constraints "NOT NULL";
	assign "stmt->bindBlob(parameter, value);";
	parse "value = static_cast<T>(stmt->getBlobCopy(column));";
}

coltype nullable_blob {
	affinity "BLOB";
	assign "stmt->bindBlob(parameter, value);";
	parse "value = static_cast<T>(stmt->getBlobCopy(column));";
}

coltype packed_blob {
	affinity "BLOB";
	constraints "NOT NULL";
	flag assign-by-value;
	include "be/_byte_order.hpp";
	assign <[@\t[
		::be::bo::toNet(value);
		stmt->bindBlob(parameter, static_cast<void*>(&value), sizeof(value));
	]]>;
	parse <[@\t[
		::std::size_t length;
		const void* ptr = stmt->getBlobRaw(column, length);
		memcpy(&value, ptr, (::std::min)(sizeof(value), length));
		::be::bo::toHost(value)
		
		if (length < sizeof(value)) return false;
	]]>;
}

coltype unknown {
	affinity "";
	constraints "NOT NULL";
	assign "stmt->bindBlob(parameter, value);";
	parse "value = static_cast<T>(stmt->getBlobCopy(column));";
}

coltype nullable_unknown {
	affinity "";
	assign "stmt->bindBlob(parameter, value);";
	parse "value = static_cast<T>(stmt->getBlobCopy(column));";
}

type I8 {
	class "::be::I8";
	fields bs.small_integer;
	flag assign-by-value;
}

type U8 {
	class "::be::U8";
	fields bs.small_integer;
	flag assign-by-value;
}

type I16 {
	class "::be::I16";
	fields bs.small_integer;
	flag assign-by-value;
}

type U16 {
	class "::be::U16";
	fields bs.small_integer;
	flag assign-by-value;
}

type I32 {
	class "::be::I32";
	fields bs.integer;
	flag assign-by-value;
}

type U32 {
	class "::be::U32";
	fields bs.integer;
	flag assign-by-value;
}

type I64 {
	class "::be::I64";
	fields bs.big_integer;
	flag assign-by-value;
}

type U64 {
	class "::be::U64";
	fields bs.unsigned_big_integer;
	flag assign-by-value;
}

type F32 {
	class "::be::F32";
	fields bs.real;
	flag assign-by-value;
}

type F64 {
	class "::be::F64";
	fields bs.real;
	flag assign-by-value;
}

type bool {
	class "bool";
	fields be.bs.small_integer;
	flag assign-by-value;
	flag builtin;
	assign "stmt->bind(parameter, value ? 1 : 0);";
	parse "value = stmt->getBool(column);";
}

type S {
	class "::be::S";
	fields bs.text;
}

type BufUC {
	class "::be::Buf<::be::UC>";
	include "be/buf.hpp";
	fields bs.blob;
	assign "stmt->bindBlob(parameter, static_cast<::be::Buf<const ::be::UC>>(value));";
	parse "value = stmt->getBlobCopy(column);";
}

type vectorUC {
	class "::std::vector<::be::UC>";
	include <vector>;
	fields be.bs.blob;
	assign "stmt->bindBlob(parameter, value.data(), value.size() * sizeof(::be::UC));";
	parse <[@\t[
		Buf<const UC> blob = stmt->getBlob(column);
		value = std::vector<U8>(&blob[1], &blob[blob.size()]);
	]]>;
}

type Id {
	class "::be::Id";
	include "be/id.hpp";
	fields U64;
	assign "stmt->bind(parameter, (U64)value);";
	parse <[@\t[
		int type = stmt->getType(column);
		if (type == SQLITE_NULL)
		{
		   value = Id();
		   return false;
		}
		if (type == SQLITE_INTEGER)
		{
		   value = Id(stmt->getUInt64(column));
		}
		else
		{
		   value = Id(stmt->getBlobString(column));
		}
	]]>;
}

type AssetId {
	class "::be::AssetId";
	include "be/asset_id.hpp";
	fields {
		Id bed;
		Id asset;
	}
	
	assign <[@\t[
		if (value.bed == bed.getId())
		{
		   stmt->bind(parameter);
		}
		else
		{
		   stmt->bind(parameter, (U64)value.bed);
		}
		stmt->bind(parameter + 1, (U64)value.asset);
	]]>;
	
	parse <[@\t[
		int type = stmt->getType(column);
		if (type == SQLITE_NULL)
		{
		   if (stmt->getType(column + 1) == SQLITE_NULL)
		   {
		      value = AssetId();
		      return false;
		   }
		   else
		   {
		      value.bed = bed.getId();
		   }
		}
		else if (type == SQLITE_INTEGER)
		{
		   value.bed = Id(stmt->getUInt64(column));
		}
		else
		{
		   value.bed = Id(stmt->getBlobString(column));
		}
		
		if (!assignTypeId(bed, stmt, column + 1, value.asset)) return false;
	]]>;
}

type vec2 {
	class "::glm::vec2";
	include <glm/vec2.hpp>;
	fields {
		be.F32 x;
		be.F32 y;
	}
}

type dvec2 {
	class "::glm::dvec2";
	include <glm/vec2.hpp>;
	fields {
		be.F64 x;
		be.F64 y;
	}
}

type ivec2 {
	class "::glm::ivec2";
	include <glm/vec2.hpp>;
	fields {
		be.I32 x;
		be.I32 y;
	}
}

type uvec2 {
	class "::glm::uvec2";
	include <glm/vec2.hpp>;
	fields {
		be.U32 x;
		be.U32 y;
	}
}

type vec2packed {
	class "::glm::vec2";
	include <glm/vec2.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type dvec2packed {
	class "::glm::dvec2";
	include <glm/vec2.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type ivec2packed {
	class "::glm::ivec2";
	include <glm/vec2.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type uvec2packed {
	class "::glm::uvec2";
	include <glm/vec2.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type vec3 {
	class "::glm::vec3";
	include <glm/vec3.hpp>;
	fields {
		be.F32 x;
		be.F32 y;
		be.F32 z;
	}
}

type dvec3 {
	class "::glm::dvec3";
	include <glm/vec3.hpp>;
	fields {
		be.F64 x;
		be.F64 y;
		be.F64 z;
	}
}

type ivec3 {
	class "::glm::ivec3";
	include <glm/vec3.hpp>;
	fields {
		be.I32 x;
		be.I32 y;
		be.I32 z;
	}
}

type uvec3 {
	class "::glm::uvec3";
	include <glm/vec3.hpp>;
	fields {
		be.U32 x;
		be.U32 y;
		be.U32 z;
	}
}

type vec3packed {
	class "::glm::vec3";
	include <glm/vec3.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type dvec3packed {
	class "::glm::dvec3";
	include <glm/vec3.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type ivec3packed {
	class "::glm::ivec3";
	include <glm/vec3.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type uvec3packed {
	class "::glm::uvec3";
	include <glm/vec3.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type vec4 {
	class "::glm::vec4";
	include <glm/vec4.hpp>;
	fields {
		be.F32 x;
		be.F32 y;
		be.F32 z;
		be.F32 w;
	}
}

type dvec4 {
	class "::glm::dvec4";
	include <glm/vec4.hpp>;
	fields {
		be.F64 x;
		be.F64 y;
		be.F64 z;
		be.F64 w;
	}
}

type ivec4 {
	class "::glm::ivec4";
	include <glm/vec4.hpp>;
	fields {
		be.I32 x;
		be.I32 y;
		be.I32 z;
		be.I32 w;
	}
}

type uvec4 {
	class "::glm::uvec4";
	include <glm/vec4.hpp>;
	fields {
		be.U32 x;
		be.U32 y;
		be.U32 z;
		be.U32 w;
	}
}

type vec4packed {
	class "::glm::vec4";
	include <glm/vec4.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type dvec4packed {
	class "::glm::dvec4";
	include <glm/vec4.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type ivec4packed {
	class "::glm::ivec4";
	include <glm/vec4.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type uvec4packed {
	class "::glm::uvec4";
	include <glm/vec4.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type quat {
	class "::glm::quat";
	include <glm/gtc/quaternion.hpp>;
	fields {
		be.F32 x;
		be.F32 y;
		be.F32 z;
		be.F32 w;
	}
}

type dquat {
	class "::glm::dquat";
	include <glm/gtc/quaternion.hpp>;
	fields {
		be.F64 x;
		be.F64 y;
		be.F64 z;
		be.F64 w;
	}
}

type dualquat {
	class "::glm::dualquat";
	include <glm/gtx/dual_quaternion.hpp>;
	fields {
		glm.quat real;
		glm.quat dual;
	}
}

type ddualquat {
	class "::glm::ddualquat";
	include <glm/gtx/dual_quaternion.hpp>;
	fields {
		glm.dquat real;
		glm.dquat dual;
	}
}

type quatpacked {
	class "::glm::quat";
	include <glm/gtc/quaternion.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type dquatpacked {
	class "::glm::dquat";
	include <glm/gtc/quaternion.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type dualquatpacked {
	class "::glm::dualquat";
	include <glm/gtc/quaternion.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type ddualquatpacked {
	class "::glm::ddualquat";
	include <glm/gtc/quaternion.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type rgb24 {
	class "::be::rgb24";
	include "be/_glm.hpp";
	include <glm/vec3.hpp>;
	fields {
		U8 r;
		U8 g;
		U8 b;
	}
	assign <[@\t[
		U32 v = value.r | ( value.g << 8) | (value.b << 16) | (0xFF << 24);
		if (!assignTypeU32(bed, stmt, parameter, v)) return false;
	]]>;
	parse<[@\t[
		U32 v;
		bool result = parseTypeU32(bed, stmt, column, v);
		value.r = v & 0xFF;
		value.g = (v >> 8) & 0xFF;
		value.b = (v >> 16) & 0xFF;
		
		if (!result)
		   return false;
	]]>;
}

type rgba32 {
	class "::be::rgba32";
	include "be/_glm.hpp";
	include <glm/vec4.hpp>;
	fields {
		U8 r;
		U8 g;
		U8 b;
		U8 a;
	}
	assign <[@\t[
		U32 v = value.r | ( value.g << 8) | (value.b << 16) | (value.a << 24);
		if (!assignTypeU32(bed, stmt, parameter, v)) return false;
	]]>;
	parse<[@\t[
		U32 v;
		bool result = parseTypeU32(bed, stmt, column, v);
		value.r = v & 0xFF;
		value.g = (v >> 8) & 0xFF;
		value.b = (v >> 16) & 0xFF;
		value.a = (v >> 24) & 0xFF;
		
		if (!result)
		   return false;
	]]>;
}

type vec3color {
	class "::glm::vec3";
	include <glm/vec3.hpp>;
	fields {
		be.F32 r;
		be.F32 g;
		be.F32 b;
	}
}

type vec4color {
	class "::glm::vec4";
	include <glm/vec4.hpp>;
	fields {
		be.F32 r;
		be.F32 g;
		be.F32 b;
		be.F32 a;
	}
}

type mat2 {
	class "::glm::mat2";
	include <glm/mat2x2.hpp>;
	fields {
		vec2 c0;
		vec2 c1;
	}
	assign <[@\t[
		bool fail = false;
		if (!assignTypeVec2(bed, stmt, parameter + 0, value[0])) fail = true;
		if (!assignTypeVec2(bed, stmt, parameter + 2, value[1])) fail = true;
		if (fail) return false;
	]]>;
	parse <[@\t[
		bool fail = false;
		if (!parseTypeVec2(bed, stmt, column + 0, value[0])) fail = true;
		if (!parseTypeVec2(bed, stmt, column + 2, value[1])) fail = true;
		if (fail) return false;
	]]>;
}

type mat3x2 {
	class "::glm::mat3x2";
	include <glm/mat3x2.hpp>;
	fields {
		vec2 c0;
		vec2 c1;
		vec2 c2;
	}
	assign <[@\t[
		bool fail = false;
		if (!assignTypeVec2(bed, stmt, parameter + 0, value[0])) fail = true;
		if (!assignTypeVec2(bed, stmt, parameter + 2, value[1])) fail = true;
		if (!assignTypeVec2(bed, stmt, parameter + 4, value[2])) fail = true;
		if (fail) return false;
	]]>;
	parse <[@\t[
		bool fail = false;
		if (!parseTypeVec2(bed, stmt, column + 0, value[0])) fail = true;
		if (!parseTypeVec2(bed, stmt, column + 2, value[1])) fail = true;
		if (!parseTypeVec2(bed, stmt, column + 4, value[2])) fail = true;
		if (fail) return false;
	]]>;
}

type mat4x2 {
	class "::glm::mat4x2";
	include <glm/mat4x2.hpp>;
	fields {
		vec2 c0;
		vec2 c1;
		vec2 c2;
		vec2 c3;
	}
	assign <[@\t[
		bool fail = false;
		if (!assignTypeVec2(bed, stmt, parameter + 0, value[0])) fail = true;
		if (!assignTypeVec2(bed, stmt, parameter + 2, value[1])) fail = true;
		if (!assignTypeVec2(bed, stmt, parameter + 4, value[2])) fail = true;
		if (!assignTypeVec2(bed, stmt, parameter + 6, value[3])) fail = true;
		if (fail) return false;
	]]>;
	parse <[@\t[
		bool fail = false;
		if (!parseTypeVec2(bed, stmt, column + 0, value[0])) fail = true;
		if (!parseTypeVec2(bed, stmt, column + 2, value[1])) fail = true;
		if (!parseTypeVec2(bed, stmt, column + 4, value[2])) fail = true;
		if (!parseTypeVec2(bed, stmt, column + 6, value[3])) fail = true;
		if (fail) return false;
	]]>;
}

type mat2x3 {
	class "::glm::mat2x3";
	include <glm/mat2x3.hpp>;
	fields {
		vec3 c0;
		vec3 c1;
	}
	assign <[@\t[
		bool fail = false;
		if (!assignTypeVec3(bed, stmt, parameter + 0, value[0])) fail = true;
		if (!assignTypeVec3(bed, stmt, parameter + 3, value[1])) fail = true;
		if (fail) return false;
	]]>;
	parse <[@\t[
		bool fail = false;
		if (!parseTypeVec3(bed, stmt, column + 0, value[0])) fail = true;
		if (!parseTypeVec3(bed, stmt, column + 3, value[1])) fail = true;
		if (fail) return false;
	]]>;
}

type mat3 {
	class "::glm::mat3";
	include <glm/mat3x3.hpp>;
	fields {
		vec3 c0;
		vec3 c1;
		vec3 c2;
	}
	assign <[@\t[
		bool fail = false;
		if (!assignTypeVec3(bed, stmt, parameter + 0, value[0])) fail = true;
		if (!assignTypeVec3(bed, stmt, parameter + 3, value[1])) fail = true;
		if (!assignTypeVec3(bed, stmt, parameter + 6, value[2])) fail = true;
		if (fail) return false;
	]]>;
	parse <[@\t[
		bool fail = false;
		if (!parseTypeVec3(bed, stmt, column + 0, value[0])) fail = true;
		if (!parseTypeVec3(bed, stmt, column + 3, value[1])) fail = true;
		if (!parseTypeVec3(bed, stmt, column + 6, value[2])) fail = true;
		if (fail) return false;
	]]>;
}

type mat4x3 {
	class "::glm::mat4x3";
	include <glm/mat4x3.hpp>;
	fields {
		vec3 c0;
		vec3 c1;
		vec3 c2;
		vec3 c3;
	}
	assign <[@\t[
		bool fail = false;
		if (!assignTypeVec3(bed, stmt, parameter + 0, value[0])) fail = true;
		if (!assignTypeVec3(bed, stmt, parameter + 3, value[1])) fail = true;
		if (!assignTypeVec3(bed, stmt, parameter + 6, value[2])) fail = true;
		if (!assignTypeVec3(bed, stmt, parameter + 9, value[3])) fail = true;
		if (fail) return false;
	]]>;
	parse <[@\t[
		bool fail = false;
		if (!parseTypeVec3(bed, stmt, column + 0, value[0])) fail = true;
		if (!parseTypeVec3(bed, stmt, column + 3, value[1])) fail = true;
		if (!parseTypeVec3(bed, stmt, column + 6, value[2])) fail = true;
		if (!parseTypeVec3(bed, stmt, column + 9, value[3])) fail = true;
		if (fail) return false;
	]]>;
}

type mat2x4 {
	class "::glm::mat2x4";
	include <glm/mat2x4.hpp>;
	fields {
		vec4 c0;
		vec4 c1;
	}
	assign <[@\t[
		bool fail = false;
		if (!assignTypeVec4(bed, stmt, parameter + 0, value[0])) fail = true;
		if (!assignTypeVec4(bed, stmt, parameter + 4, value[1])) fail = true;
		if (fail) return false;
	]]>;
	parse <[@\t[
		bool fail = false;
		if (!parseTypeVec4(bed, stmt, column + 0, value[0])) fail = true;
		if (!parseTypeVec4(bed, stmt, column + 4, value[1])) fail = true;
		if (fail) return false;
	]]>;
}

type mat3x4 {
	class "::glm::mat3x4";
	include <glm/mat3x4.hpp>;
	fields {
		vec4 c0;
		vec4 c1;
		vec4 c2;
	}
	assign <[@\t[
		bool fail = false;
		if (!assignTypeVec4(bed, stmt, parameter + 0, value[0])) fail = true;
		if (!assignTypeVec4(bed, stmt, parameter + 4, value[1])) fail = true;
		if (!assignTypeVec4(bed, stmt, parameter + 8, value[2])) fail = true;
		if (fail) return false;
	]]>;
	parse <[@\t[
		bool fail = false;
		if (!parseTypeVec4(bed, stmt, column + 0, value[0])) fail = true;
		if (!parseTypeVec4(bed, stmt, column + 4, value[1])) fail = true;
		if (!parseTypeVec4(bed, stmt, column + 8, value[2])) fail = true;
		if (fail) return false;
	]]>;
}

type mat4 {
	class "::glm::mat4";
	include <glm/mat4x4.hpp>;
	fields {
		vec4 c0;
		vec4 c1;
		vec4 c2;
		vec4 c3;
	}
	assign <[@\t[
		bool fail = false;
		if (!assignTypeVec4(bed, stmt, parameter + 0, value[0])) fail = true;
		if (!assignTypeVec4(bed, stmt, parameter + 4, value[1])) fail = true;
		if (!assignTypeVec4(bed, stmt, parameter + 8, value[2])) fail = true;
		if (!assignTypeVec4(bed, stmt, parameter + 12, value[3])) fail = true;
		if (fail) return false;
	]]>;
	parse <[@\t[
		bool fail = false;
		if (!parseTypeVec4(bed, stmt, column + 0, value[0])) fail = true;
		if (!parseTypeVec4(bed, stmt, column + 4, value[1])) fail = true;
		if (!parseTypeVec4(bed, stmt, column + 8, value[2])) fail = true;
		if (!parseTypeVec4(bed, stmt, column + 12, value[3])) fail = true;
		if (fail) return false;
	]]>;
}

type mat2packed {
	class "::glm::mat2";
	include <glm/mat2x2.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type mat3x2packed {
	class "::glm::mat3x2";
	include <glm/mat3x2.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type mat4x2packed {
	class "::glm::mat4x2";
	include <glm/mat4x2.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type mat2x3packed {
	class "::glm::mat2x3";
	include <glm/mat2x3.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type mat3packed {
	class "::glm::mat3";
	include <glm/mat3x3.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type mat4x3packed {
	class "::glm::mat4x3";
	include <glm/mat4x3.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type mat2x4packed {
	class "::glm::mat2x4";
	include <glm/mat2x4.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type mat3x4packed {
	class "::glm::mat3x4";
	include <glm/mat3x4.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type mat4packed {
	class "::glm::mat4";
	include <glm/mat4x4.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type dmat2 {
	class "::glm::dmat2";
	include <glm/mat2x2.hpp>;
	fields {
		dvec2 c0;
		dvec2 c1;
	}
	assign <[@\t[
		bool fail = false;
		if (!assignTypeDvec2(bed, stmt, parameter + 0, value[0])) fail = true;
		if (!assignTypeDvec2(bed, stmt, parameter + 2, value[1])) fail = true;
		if (fail) return false;
	]]>;
	parse <[@\t[
		bool fail = false;
		if (!parseTypeDvec2(bed, stmt, column + 0, value[0])) fail = true;
		if (!parseTypeDvec2(bed, stmt, column + 2, value[1])) fail = true;
		if (fail) return false;
	]]>;
}

type dmat3x2 {
	class "::glm::dmat3x2";
	include <glm/mat3x2.hpp>;
	fields {
		dvec2 c0;
		dvec2 c1;
		dvec2 c2;
	}
	assign <[@\t[
		bool fail = false;
		if (!assignTypeDvec2(bed, stmt, parameter + 0, value[0])) fail = true;
		if (!assignTypeDvec2(bed, stmt, parameter + 2, value[1])) fail = true;
		if (!assignTypeDvec2(bed, stmt, parameter + 4, value[2])) fail = true;
		if (fail) return false;
	]]>;
	parse <[@\t[
		bool fail = false;
		if (!parseTypeDvec2(bed, stmt, column + 0, value[0])) fail = true;
		if (!parseTypeDvec2(bed, stmt, column + 2, value[1])) fail = true;
		if (!parseTypeDvec2(bed, stmt, column + 4, value[2])) fail = true;
		if (fail) return false;
	]]>;
}

type dmat4x2 {
	class "::glm::dmat4x2";
	include <glm/mat4x2.hpp>;
	fields {
		dvec2 c0;
		dvec2 c1;
		dvec2 c2;
		dvec2 c3;
	}
	assign <[@\t[
		bool fail = false;
		if (!assignTypeDvec2(bed, stmt, parameter + 0, value[0])) fail = true;
		if (!assignTypeDvec2(bed, stmt, parameter + 2, value[1])) fail = true;
		if (!assignTypeDvec2(bed, stmt, parameter + 4, value[2])) fail = true;
		if (!assignTypeDvec2(bed, stmt, parameter + 6, value[3])) fail = true;
		if (fail) return false;
	]]>;
	parse <[@\t[
		bool fail = false;
		if (!parseTypeDvec2(bed, stmt, column + 0, value[0])) fail = true;
		if (!parseTypeDvec2(bed, stmt, column + 2, value[1])) fail = true;
		if (!parseTypeDvec2(bed, stmt, column + 4, value[2])) fail = true;
		if (!parseTypeDvec2(bed, stmt, column + 6, value[3])) fail = true;
		if (fail) return false;
	]]>;
}

type dmat2x3 {
	class "::glm::dmat2x3";
	include <glm/mat2x3.hpp>;
	fields {
		dvec3 c0;
		dvec3 c1;
	}
	assign <[@\t[
		bool fail = false;
		if (!assignTypeDvec3(bed, stmt, parameter + 0, value[0])) fail = true;
		if (!assignTypeDvec3(bed, stmt, parameter + 3, value[1])) fail = true;
		if (fail) return false;
	]]>;
	parse <[@\t[
		bool fail = false;
		if (!parseTypeDvec3(bed, stmt, column + 0, value[0])) fail = true;
		if (!parseTypeDvec3(bed, stmt, column + 3, value[1])) fail = true;
		if (fail) return false;
	]]>;
}

type dmat3 {
	class "::glm::dmat3";
	include <glm/mat3x3.hpp>;
	fields {
		dvec3 c0;
		dvec3 c1;
		dvec3 c2;
	}
	assign <[@\t[
		bool fail = false;
		if (!assignTypeDvec3(bed, stmt, parameter + 0, value[0])) fail = true;
		if (!assignTypeDvec3(bed, stmt, parameter + 3, value[1])) fail = true;
		if (!assignTypeDvec3(bed, stmt, parameter + 6, value[2])) fail = true;
		if (fail) return false;
	]]>;
	parse <[@\t[
		bool fail = false;
		if (!parseTypeDvec3(bed, stmt, column + 0, value[0])) fail = true;
		if (!parseTypeDvec3(bed, stmt, column + 3, value[1])) fail = true;
		if (!parseTypeDvec3(bed, stmt, column + 6, value[2])) fail = true;
		if (fail) return false;
	]]>;
}

type dmat4x3 {
	class "::glm::dmat4x3";
	include <glm/mat4x3.hpp>;
	fields {
		dvec3 c0;
		dvec3 c1;
		dvec3 c2;
		dvec3 c3;
	}
	assign <[@\t[
		bool fail = false;
		if (!assignTypeDvec3(bed, stmt, parameter + 0, value[0])) fail = true;
		if (!assignTypeDvec3(bed, stmt, parameter + 3, value[1])) fail = true;
		if (!assignTypeDvec3(bed, stmt, parameter + 6, value[2])) fail = true;
		if (!assignTypeDvec3(bed, stmt, parameter + 9, value[3])) fail = true;
		if (fail) return false;
	]]>;
	parse <[@\t[
		bool fail = false;
		if (!parseTypeDvec3(bed, stmt, column + 0, value[0])) fail = true;
		if (!parseTypeDvec3(bed, stmt, column + 3, value[1])) fail = true;
		if (!parseTypeDvec3(bed, stmt, column + 6, value[2])) fail = true;
		if (!parseTypeDvec3(bed, stmt, column + 9, value[3])) fail = true;
		if (fail) return false;
	]]>;
}

type dmat2x4 {
	class "::glm::dmat2x4";
	include <glm/mat2x4.hpp>;
	fields {
		dvec4 c0;
		dvec4 c1;
	}
	assign <[@\t[
		bool fail = false;
		if (!assignTypeDvec4(bed, stmt, parameter + 0, value[0])) fail = true;
		if (!assignTypeDvec4(bed, stmt, parameter + 4, value[1])) fail = true;
		if (fail) return false;
	]]>;
	parse <[@\t[
		bool fail = false;
		if (!parseTypeDvec4(bed, stmt, column + 0, value[0])) fail = true;
		if (!parseTypeDvec4(bed, stmt, column + 4, value[1])) fail = true;
		if (fail) return false;
	]]>;
}

type dmat3x4 {
	class "::glm::dmat3x4";
	include <glm/mat3x4.hpp>;
	fields {
		dvec4 c0;
		dvec4 c1;
		dvec4 c2;
	}
	assign <[@\t[
		bool fail = false;
		if (!assignTypeDvec4(bed, stmt, parameter + 0, value[0])) fail = true;
		if (!assignTypeDvec4(bed, stmt, parameter + 4, value[1])) fail = true;
		if (!assignTypeDvec4(bed, stmt, parameter + 8, value[2])) fail = true;
		if (fail) return false;
	]]>;
	parse <[@\t[
		bool fail = false;
		if (!parseTypeDvec4(bed, stmt, column + 0, value[0])) fail = true;
		if (!parseTypeDvec4(bed, stmt, column + 4, value[1])) fail = true;
		if (!parseTypeDvec4(bed, stmt, column + 8, value[2])) fail = true;
		if (fail) return false;
	]]>;
}

type dmat4 {
	class "::glm::dmat4";
	include <glm/mat4x4.hpp>;
	fields {
		dvec4 c0;
		dvec4 c1;
		dvec4 c2;
		dvec4 c3;
	}
	assign <[@\t[
		bool fail = false;
		if (!assignTypeDvec4(bed, stmt, parameter + 0, value[0])) fail = true;
		if (!assignTypeDvec4(bed, stmt, parameter + 4, value[1])) fail = true;
		if (!assignTypeDvec4(bed, stmt, parameter + 8, value[2])) fail = true;
		if (!assignTypeDvec4(bed, stmt, parameter + 12, value[3])) fail = true;
		if (fail) return false;
	]]>;
	parse <[@\t[
		bool fail = false;
		if (!parseTypeDvec4(bed, stmt, column + 0, value[0])) fail = true;
		if (!parseTypeDvec4(bed, stmt, column + 4, value[1])) fail = true;
		if (!parseTypeDvec4(bed, stmt, column + 8, value[2])) fail = true;
		if (!parseTypeDvec4(bed, stmt, column + 12, value[3])) fail = true;
		if (fail) return false;
	]]>;
}

type dmat2packed {
	class "::glm::dmat2";
	include <glm/mat2x2.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type dmat3x2packed {
	class "::glm::dmat3x2";
	include <glm/mat3x2.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type dmat4x2packed {
	class "::glm::dmat4x2";
	include <glm/mat4x2.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type dmat2x3packed {
	class "::glm::dmat2x3";
	include <glm/mat2x3.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type dmat3packed {
	class "::glm::dmat3";
	include <glm/mat3x3.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type dmat4x3packed {
	class "::glm::dmat4x3";
	include <glm/mat4x3.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type dmat2x4packed {
	class "::glm::dmat2x4";
	include <glm/mat2x4.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type dmat3x4packed {
	class "::glm::dmat3x4";
	include <glm/mat3x4.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type dmat4packed {
	class "::glm::dmat4";
	include <glm/mat4x4.hpp>;
	include "be/_glm.hpp";
	fields be.bs.packed_blob;
}

type range {
	class "::be::range";
	include "be/extents.hpp";
	fields {
		F32 offset;
		F32 dim;
	}
}

type drange {
	class "::be::drange";
	include "be/extents.hpp";
	fields {
		F64 offset;
		F64 dim;
	}
}

type irange {
	class "::be::irange";
	include "be/extents.hpp";
	fields {
		I32 offset;
		U32 dim;
	}
}

type rect {
	class "::be::rect";
	include "be/extents.hpp";
	fields {
		glm.vec2 offset;
		glm.vec2 dim;
	}
}

type drect {
	class "::be::drect";
	include "be/extents.hpp";
	fields {
		glm.dvec2 offset;
		glm.dvec2 dim;
	}
}

type irect {
	class "::be::irect";
	include "be/extents.hpp";
	fields {
		glm.ivec2 offset;
		glm.uvec2 dim;
	}
}

type box {
	class "::be::box";
	include "be/extents.hpp";
	fields {
		glm.vec3 offset;
		glm.vec3 dim;
	}
}

type dbox {
	class "::be::dbox";
	include "be/extents.hpp";
	fields {
		glm.dvec3 offset;
		glm.dvec3 dim;
	}
}

type ibox {
	class "::be::ibox";
	include "be/extents.hpp";
	fields {
		glm.ivec3 offset;
		glm.uvec3 dim;
	}
}

type rangepacked {
	class "::be::range";
	include "be/extents.hpp";
	fields be.bs.packed_blob;
}

type drangepacked {
	class "::be::drange";
	include "be/extents.hpp";
	fields be.bs.packed_blob;
}

type irangepacked {
	class "::be::irange";
	include "be/extents.hpp";
	fields be.bs.packed_blob;
}

type rectpacked {
	class "::be::rect";
	include "be/extents.hpp";
	fields be.bs.packed_blob;
}

type drectpacked {
	class "::be::drect";
	include "be/extents.hpp";
	fields be.bs.packed_blob;
}

type irectpacked {
	class "::be::irect";
	include "be/extents.hpp";
	fields be.bs.packed_blob;
}

type boxpacked {
	class "::be::box";
	include "be/extents.hpp";
	fields be.bs.packed_blob;
}

type dboxpacked {
	class "::be::dbox";
	include "be/extents.hpp";
	fields be.bs.packed_blob;
}

type iboxpacked {
	class "::be::ibox";
	include "be/extents.hpp";
	fields be.bs.packed_blob;
}

} // namespace be::bs
} // namespace be
